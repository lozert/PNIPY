@startuml

class User {
    -id: int
    -login: String
    -password: String
    -role: String
    --
    +logIn(): void
    +logOut(): void
}

class Student {
    -id: int
    -name: String
    --
    +enrollInCourse(course: Course): void
    +viewGrades(): Map<Course, Grade>
}


class Teacher {
    -id: String
    -name: String
    --
    +assignCourse(course: Course): void
    +generateReport()
}

' Класс Receiver, который выполняет действия
interface Command {
    +execute(): void
}

' Класс Administrator, который является Receiver и не содержит конкретных методов
class Administrator {
    -id: String
    -name: String
    -role: String
    --
    +performAction(action: Command): void
    +generateReport()
}

' Интерфейс для описания доступных операций (создание, удаление пользователей)
interface AdministratorActions {
    +createUser(login: String, password: String, role: String): void
    +deleteUser(login: String): void
}

' Конкретные команды, которые реализуют интерфейс Command
class CreateUserCommand implements Command {
    -login: String
    -password: String
    -role: String
    --
    +execute(): void
}

class DeleteUserCommand implements Command {
    -login: String
    --
    +execute(): void
}

' Класс Invoker, который управляет командами
class CommandExecutor {
    -command: Command
    --
    +setCommand(command: Command): void
    +executeCommand(): void
}

' Связи между классами
Administrator --> AdministratorActions : uses
Administrator --> Command : execute action
CommandExecutor --> Command

CreateUserCommand -down-> AdministratorActions : execute() -> createUser()
DeleteUserCommand -down-> AdministratorActions : execute() -> deleteUser()

' Иерархия пользователей
User <|-- Student
User <|-- Teacher
User <|-- Administrator

' Классы для курсов и экзаменов
class Course {
    -title: String
    -teacher: Teacher
    - // Подгруппа
    -gradingStrategy: GradingStrategy
    -exams: List<Exam>
    --
    +addStudent(student: Student): void
    +calculateFinalGrade(student: Student): String
    +assignExam(exam: Exam): void
}

class Exam {
    -type: String
    -date: Date
    -gradingStrategy: GradingStrategy
    --
    +conductExam(): void
    +calculateGrade(): String
}

Course "1" *-- "many" Exam



class Journal {
    -instance: Journal
    -studentsGrades: Map<Student, Map<Course, Grade>>
    -attendance: Map<Student, Map<Session, Boolean>>
    --
    +getInstance(): 
    +addGrade(student: Student, course: Course, grade: Grade): void
    +addAttendance(student: Student, session: Session, attended: Boolean): void
}


abstract class GroupComponent {
    + showStudents() : void
}

' Классы для групп и подгрупп
class Group {
    -name: String
    -subgroups: List<Subgroup>
    --
    +showStudents(): String
    +addStudent(student: Student): void
    +addSubgroup(subgroup: Subgroup): void
    +assignSchedule(schedule: Schedule): void
}

class Subgroup {
    -name: String
    -students: List<Student>
    -schedule: Schedule
    --
    + showStudents() : void
    +addStudent(student: Student): void
    +getSubgroupInfo(): String
    +getSchedule(): String
}


Subgroup o-- Student
Group *-- Subgroup
Schedule o-- Group
Schedule o-- Course

' Классы для расписания
class Schedule {
    -date: date
    -time: time
    -Course: Course
    -Group: Group
    -location: int
    --
    +addSession(session: Session): void
    +updateSession(session: Session): void
    +getScheduleInfo(): String
}


class Report {
    -id: int
    -title: String
    -creation_date: date
    -author: Teacher or Admin
    --
    +generateReport(): void
}


Grade <|-- WeightedGrade
Grade <|-- CommentedGrade





Schedule o-- NotificationObserver
Course o-- Teacher




' Классы для уведомлений
class Notification {
    -observers: List<NotificationObserver>
    --
    +addObserver(observer: NotificationObserver): void
    +removeObserver(observer: NotificationObserver): void
    +notifyObservers(): void
}

interface NotificationObserver {
    +update(): void
}

class StudentNotification implements NotificationObserver {
    --
    +update(): void
}

class TeacherNotification implements NotificationObserver {
    --
    +update(): void
}

'Proxy
interface CourseAccess {
    +viewGrades(): void
}

class RealCourseAccess {
    +viewGrades(student: Student): Map<Course, Grade>
    +viewStudentsGrades(teacher: Teacher): Map<Student, Grade>
}

class ProxyCourseAccess {
    -realCourseAccess: RealCourseAccess
    -userRole: String
    --
    +viewGrades(): void
}

'Proxy
Teacher --> CourseAccess : "Запрос"
Student --> CourseAccess : "Запрос"
CourseAccess <|-- RealCourseAccess
CourseAccess <|-- ProxyCourseAccess
ProxyCourseAccess o-- RealCourseAccess : "Delegates"

'Course
Course o-- Subgroup

' Teacher
Teacher o-- Report

' Admin
Administrator o-- Report

'Composite
GroupComponent <|-- Group
GroupComponent <|-- Subgroup
Group o-- GroupComponent

NotificationObserver o-- Notification
TeacherNotification o-- Notification
StudentNotification o-- Notification

@enduml
